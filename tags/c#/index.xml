<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# on Moien Tajik&#39;s Blog | وبلاگ معین تاجیک</title>
    <link>/tags/c#/</link>
    <description>Recent content in C# on Moien Tajik&#39;s Blog | وبلاگ معین تاجیک</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fa</language>
    <lastBuildDate>Fri, 10 Jan 2020 20:00:00 +0330</lastBuildDate>
    
	<atom:link href="/tags/c#/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Garbage Collector در CSharp - قسمت سوم</title>
      <link>/posts/2020-01-10-gc-part-3/</link>
      <pubDate>Fri, 10 Jan 2020 20:00:00 +0330</pubDate>
      
      <guid>/posts/2020-01-10-gc-part-3/</guid>
      <description>در قسمت قبلی درباره تفاوت‌های Stack و Heap صحبت کرده و به این نتیجه رسیدیم که برای آزادسازی حافظه Heap، در صورتی که نخواهیم اینکار را بصورت دستی انجام دهیم، نیاز به Garbage Collector پیدا خواهیم کرد.
تاریخچه ای مختصر از GC در NET. 
ایده اولیه ایجاد Garbage Collector در NET. در سال 1990 بود که در آن زمان، مایکروسافت مشغول پیاده سازی خود از JavaScript بنام JScript بود.</description>
    </item>
    
    <item>
      <title>Garbage Collector در CSharp - قسمت دوم</title>
      <link>/posts/2019-12-12-gc-part-2/</link>
      <pubDate>Thu, 12 Dec 2019 23:00:00 +0330</pubDate>
      
      <guid>/posts/2019-12-12-gc-part-2/</guid>
      <description>در این مطلب قصد داریم به تفاوت‎های بین Stack و Heap در Memory و زبان #C بپردازیم.
به زبان ساده، وقتی شما متغیر جدیدی ایجاد میکنید، با توجه به نوع (Type) آن متغیر، &amp;ldquo;مقدار&amp;rdquo; متغیر شما در Stack یا Heap قرار خواهد گرفت.
Stack Stack نوعی ساختمان داده است که در آن، داده‌ها بصورت خطی قرار گرفته و اصطلاحا ساختار LIFO ( مخفف Last in, First Out ) دارند، بدین معنی که همیشه آخرین داده ای که داخل Stack قرار داده اید، اولین داده ای است که قادر به خواندن آن خواهید بود.</description>
    </item>
    
    <item>
      <title>Garbage Collector در CSharp - قسمت اول</title>
      <link>/posts/2019-11-29-gc-part-1/</link>
      <pubDate>Fri, 29 Nov 2019 21:00:00 +0330</pubDate>
      
      <guid>/posts/2019-11-29-gc-part-1/</guid>
      <description>Garbage Collection  فرض کنید متغییری را ایجاد کرده و به آن مقدار داده ‎‎اید:
string message = &amp;quot;Hello World!&amp;quot;;  آیا تابحال به این موضوع فکر کرده اید که طول عمر متغییر message تا چه زمانی است و چه زمانی باید از بین برود؟
چه زمانی باید توسط کامپایلر ( یا بهتر بگوییم ، Runtime ) طول عمر این متغییر به پایان برسد و از حافظه حذف شود؟</description>
    </item>
    
    <item>
      <title>C# Internals - Single and SingleOrDefault</title>
      <link>/posts/2019-10-16-csharp-internals-single/</link>
      <pubDate>Wed, 16 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019-10-16-csharp-internals-single/</guid>
      <description>بسیاری از افراد ، گاهی اوقات از متدهای First و FirstOrDefault در LINQ بعنوان جایگزین Single و SingleOrDefault استفاده میکنند ، با این منطق که Single &amp;ldquo;تمام&amp;rdquo; آیتم های یک Enumerable را پیمایش میکند تا نتیجه را یافت کند ، اما First و FirstOrDefault نیاز به پیمایش تمام آیتم های یک Enumerable را ندارند ، در نتیجه سریع تر هستند.
جدا از اینکه جابه‌جایی استفاده از Single و First در اکثر مواقع امکان پذیر نیست و این دو متد ، نمیتوانند جایگزین یکدیگر باشند و کارایی متفاوتی دارند ، اما بعضی اوقات قابل جابه‌جا شدن نیز هستند.</description>
    </item>
    
    <item>
      <title>الگوهای طراحی - Mediator</title>
      <link>/posts/2019-01-19-mediator-design-pattern/</link>
      <pubDate>Sat, 19 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/2019-01-19-mediator-design-pattern/</guid>
      <description>الگوی طراحی Mediator نحوه ی ارتباط چند object را در داخل خود کپسوله و مشخص میکند.
یک مثال واقعی از این الگو :
برج مراقبت یک فرودگاه را در نظر بگیرید. این بخش از تمامی هواپیماهایی که تردد میکنند باخبر بوده و وظیفه مدیریت پرواز آن ها را بر عهده داشته و اجازه فرود و پرواز آن ها را صادر میکند. در صورتی که اجازه فرود داده نشود ، هواپیما اجازه به نشستن ندارد.</description>
    </item>
    
  </channel>
</rss>